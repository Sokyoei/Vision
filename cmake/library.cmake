find_package(fmt CONFIG REQUIRED)
# target_link_libraries(main PRIVATE fmt::fmt)
# target_link_libraries(main PRIVATE fmt::fmt-header-only)
if(fmt_FOUND)
    set(USE_FMT true)
endif(fmt_FOUND)

find_package(spdlog CONFIG REQUIRED)
# target_link_libraries(main PRIVATE spdlog::spdlog)
# target_link_libraries(main PRIVATE spdlog::spdlog_header_only)
if(spdlog_FOUND)
    set(USE_SPDLOG true)
endif(spdlog_FOUND)

find_package(FFMPEG)
# target_include_directories(main PRIVATE ${FFMPEG_INCLUDE_DIRS})
# target_link_directories(main PRIVATE ${FFMPEG_LIBRARY_DIRS})
# target_link_libraries(main PRIVATE ${FFMPEG_LIBRARIES})
if(FFMPEG_FOUND)
    set(USE_FFMPEG true)
endif(FFMPEG_FOUND)

find_package(realsense2 CONFIG)
# target_link_libraries(main PRIVATE realsense2::fw realsense2::rsutils realsense2::realsense2 realsense2::realsense-file)
if(realsense2_FOUND)
    set(USE_REALSENSE2 true)
endif(realsense2_FOUND)

find_package(glad CONFIG)
# target_link_libraries(main PRIVATE glad::glad)
if(glad_FOUND)
    set(USE_GLAD true)
endif(glad_FOUND)

find_package(glfw3 CONFIG)
# target_link_libraries(main PRIVATE glfw)
if(glfw3_FOUND)
    set(USE_GLFW3 true)
endif(glfw3_FOUND)

find_package(imgui CONFIG)
# target_link_libraries(main PRIVATE imgui::imgui)
if(imgui_FOUND)
    set(USE_IMGUI true)
endif(imgui_FOUND)

find_package(OpenCV CONFIG)
if(OpenCV_FOUND)
    set(USE_OPENCV true)
endif(OpenCV_FOUND)

if(CMAKE_CUDA_COMPILER)
    find_package(CUDAToolkit REQUIRED)
    set(USE_CUDATOOLKIT true)
endif(CMAKE_CUDA_COMPILER)


# WARNING: if default, the onnxruntime.dll first well load in C:\Windows\System32\onnxruntime.dll
if(ONNXRuntime)
    if(ONNXRuntime_CMAKE_DIR)
        find_package(onnxruntime CONFIG PATHS ${ONNXRuntime_CMAKE_DIR})
        if(onnxruntime_FOUND)
            set(USE_ONNXRUNTIME true)
        endif(onnxruntime_FOUND)
    else()
        find_package(ONNXRuntime MODULE)
        if(ONNXRuntime_FOUND)
            set(USE_ONNXRUNTIME true)
        endif(ONNXRuntime_FOUND)
    endif()
endif(ONNXRuntime)

if(TensorRT)
    find_package(TensorRT MODULE)
    if(TensorRT_FOUND)
        set(USE_TENSORRT true)
    endif(TensorRT_FOUND)
endif(TensorRT)

if(OpenVINO)
    find_package(OpenVINO COMPONENTS Runtime ONNX Threading)
    if(OpenVINO_FOUND)
        set(USE_OPENVINO true)
    endif(OpenVINO_FOUND)
endif(OpenVINO)
