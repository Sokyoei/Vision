[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "Vision"
version = "0.0.1"
authors = [{ name = "Sokyoei" }]
license = { text = "MIT" }
dependencies = ["numpy", "opencv-python"]

[project.optional-dependencies]
dev = ["isort", "ruff", "black"]
test = ["pytest"]
pytorch = ["timm"]
tensorrt = ["tensorrt", "cuda-python", "pycuda", "ploygraphy"]
onnx = [
    "onnx",
    "onnx-graphsurgeon",
    "onnxruntime-gpu",   # or onnxruntime(cpu ver.)
    "onnx-simplifier",
]
vit = ["vit-pytorch"]
mediapipe = ["mediapipe"]
tracking = ["boxmot"]
opencv = ["imutils"]
pose = ["rtmlib"]
ocr = ["pytesseract", "pyocr", "easyocr"]

[tool.rye]
dev-dependencies = ["pytest>=8.2.1"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["LVM", "opencv_learn", "SAM", "Vision", "YOLO"]

[tool.isort]
line_length = 120
multi_line_output = 0

[tool.autopep8]
max_line_length = 120

[tool.black]
line-length = 120
preview = true
skip-string-normalization = true
skip-magic-trailing-comma = true

[tool.ruff]
line-length = 120
select = [
    "F",   # pyflakes
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "C90", # mccabe
    "I",   # isort
    # "N",   # pep8-naming
    # "D",   # pydocstyle
    "PD",  # pandas-vet
    "NPY", # numpy specific rules
    "RUF", # ruff specific rules
]
ignore = [
    "E501",   # line too long
    "RUF003", # ambiguous-unicode-character-comment
    "RUF012", # mutable-class-default
]
ignore-init-module-imports = true

[tool.ruff.isort]

[tool.ruff.pydocstyle]
convention = "google"
